{"version":3,"sources":["Components/Header.js","Components/Form.js","App.js","serviceWorker.js","index.js"],"names":["Header","Navbar","id","Brand","InputForm","useState","city","setCity","name","setName","temp","setTemp","humidity","setHumidity","wind","setWind","icon","setIcon","des","setDes","Form","Container","Row","Col","md","span","offset","InputGroup","className","Control","type","onChange","e","target","value","placeholder","Append","Button","onClick","preventDefault","fetch","process","then","res","json","data","sys","country","main","speed","weather","console","log","variant","Card","Body","src","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"8PAaeA,MAVf,WACE,OACE,oCACE,kBAACC,EAAA,EAAD,CAAQC,GAAG,OACT,kBAACD,EAAA,EAAOE,MAAR,CAAcD,GAAG,WAAjB,c,+DCwFOE,MAtFf,WAEE,IAFmB,EAKKC,qBALL,mBAKZC,EALY,KAKNC,EALM,OAMKF,qBANL,mBAMZG,EANY,KAMNC,EANM,OAOKJ,qBAPL,mBAOZK,EAPY,KAONC,EAPM,OAQaN,qBARb,mBAQZO,EARY,KAQFC,EARE,OASKR,qBATL,mBASZS,EATY,KASNC,EATM,OAUKV,qBAVL,mBAUZW,EAVY,KAUNC,EAVM,OAWGZ,qBAXH,mBAWZa,EAXY,KAWPC,EAXO,KAqCnB,OACE,kBAACC,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,CAAKC,GAAI,CAAEC,KAAM,EAAGC,OAAQ,IAC1B,kBAACC,EAAA,EAAD,CAAYC,UAAU,QACpB,kBAACR,EAAA,EAAKS,QAAN,CACEC,KAAK,OACLtB,KAAK,OACLuB,SAAU,SAACC,GAAD,OAAOzB,EAAQyB,EAAEC,OAAOC,QAClCC,YAAY,SAEd,kBAACR,EAAA,EAAWS,OAAZ,KACE,kBAACC,EAAA,EAAD,CACEC,QArCQ,SAACN,GACvBA,EAAEO,iBACFC,MAAM,qDAAD,OACkDlC,EADlD,iCAdSmC,qCAiBXC,MAAK,SAACC,GAAD,OAASA,EAAIC,UAGlBF,MAAK,SAACG,GACLpC,EAAQoC,EAAKrC,KAAO,KAAOqC,EAAKC,IAAIC,SACpCpC,EAAQkC,EAAKG,KAAKtC,KAAO,UACzBG,EAAYgC,EAAKG,KAAKpC,SAAW,cACjCG,EAAQ8B,EAAK/B,KAAKmC,MAAQ,cAC1BhC,EAAQ,oCAAD,OAC+B4B,EAAKK,QAAQ,GAAGlC,KAD/C,YAGPG,EAAO0B,EAAKK,QAAQ,GAAGF,MACvBG,QAAQC,IAAIP,OAqBFf,KAAK,SACLuB,QAAQ,WAHV,cAYR,kBAAC/B,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,CAAKC,GAAI,CAAEC,KAAM,EAAGC,OAAQ,GAAKxB,GAAG,UAClC,kBAACoD,EAAA,EAAD,CAAMpD,GAAG,UACP,kBAACoD,EAAA,EAAKC,KAAN,CAAWrD,GAAG,YACZ,yBAAKA,GAAG,WACN,wBAAI0B,UAAU,QAAQpB,GACtB,wBAAIoB,UAAU,QAAQlB,GACtB,wBAAIkB,UAAU,OAAOhB,GACrB,wBAAIgB,UAAU,QAAQd,GACtB,wBAAIc,UAAU,QACX,IACAV,EACD,yBAAKsC,IAAKxC,a,YClEfyC,MATf,WACE,OACE,oCACE,kBAAC,EAAD,MACA,kBAAC,EAAD,QCAcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrB5B,MAAK,SAAA6B,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLvB,QAAQuB,MAAMA,EAAMC,c","file":"static/js/main.fccf1dea.chunk.js","sourcesContent":["import React from \"react\";\nimport Navbar from \"react-bootstrap/Navbar\";\n\nfunction Header() {\n  return (\n    <>\n      <Navbar id=\"nav\">\n        <Navbar.Brand id=\"navText\">Weather</Navbar.Brand>\n      </Navbar>\n    </>\n  );\n}\n\nexport default Header;\n","import React, { useState } from \"react\";\nimport Form from \"react-bootstrap/Form\";\nimport { Button } from \"react-bootstrap\";\nimport Card from \"react-bootstrap/Card\";\nimport Container from \"react-bootstrap/Container\";\nimport InputGroup from \"react-bootstrap/InputGroup\";\nimport Row from \"react-bootstrap/Row\";\nimport Col from \"react-bootstrap/Col\";\n\nfunction InputForm() {\n  //Protected API key\n  const API_KEY = process.env.REACT_APP_API_KEY;\n\n  //useState to take city input and build out query\n  const [city, setCity] = useState();\n  const [name, setName] = useState();\n  const [temp, setTemp] = useState();\n  const [humidity, setHumidity] = useState();\n  const [wind, setWind] = useState();\n  const [icon, setIcon] = useState();\n  const [des, setDes] = useState();\n\n  //Fetch function\n  const handleFetchData = (e) => {\n    e.preventDefault();\n    fetch(\n      `https://api.openweathermap.org/data/2.5/weather?q=${city}&units=imperial&appid=${API_KEY}`\n    )\n      .then((res) => res.json())\n      // .then((data) => console.log(data));\n      // console.log(data.name);\n      .then((data) => {\n        setName(data.name + \", \" + data.sys.country);\n        setTemp(data.main.temp + \"Â° F\");\n        setHumidity(data.main.humidity + \"% Humidity\");\n        setWind(data.wind.speed + \" MPH Winds\");\n        setIcon(\n          `http://openweathermap.org/img/wn/${data.weather[0].icon}@2x.png`\n        );\n        setDes(data.weather[0].main);\n        console.log(data);\n      });\n  };\n\n  //Need to set up input field to search for specific params\n\n  return (\n    <Form>\n      <Container>\n        <Row>\n          <Col md={{ span: 4, offset: 4 }}>\n            <InputGroup className=\"mb-3\">\n              <Form.Control\n                type=\"text\"\n                name=\"city\"\n                onChange={(e) => setCity(e.target.value)}\n                placeholder=\"City\"\n              />\n              <InputGroup.Append>\n                <Button\n                  onClick={handleFetchData}\n                  type=\"submit\"\n                  variant=\"primary\"\n                >\n                  Search\n                </Button>\n              </InputGroup.Append>\n            </InputGroup>\n          </Col>\n        </Row>\n\n        <Row>\n          <Col md={{ span: 8, offset: 2 }} id=\"column\">\n            <Card id=\"outPut\">\n              <Card.Body id=\"crdColor\">\n                <div id=\"appText\">\n                  <h6 className=\"city\">{name}</h6>\n                  <h6 className=\"temp\">{temp}</h6>\n                  <h6 className=\"hum\">{humidity}</h6>\n                  <h6 className=\"wind\">{wind}</h6>\n                  <h6 className=\"icon\">\n                    {\" \"}\n                    {des}\n                    <img src={icon} />\n                  </h6>\n                </div>\n              </Card.Body>\n            </Card>\n          </Col>\n        </Row>\n      </Container>\n    </Form>\n  );\n}\n\nexport default InputForm;\n","import React from \"react\";\nimport Header from \"./Components/Header\";\nimport InputForm from \"../src/Components/Form\";\n\n//Style\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport \"./App.css\";\n\nfunction App() {\n  return (\n    <>\n      <Header />\n      <InputForm />\n    </>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}